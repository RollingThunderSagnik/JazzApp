{"map":"{\"version\":3,\"sources\":[\"/home/sagnikg/react/JazzApp/node_modules/file-loader/dist/cjs.js??ref--6-oneOf-7!/home/sagnikg/react/JazzApp/src/logo.svg\",\"/home/sagnikg/react/JazzApp/src/App.js\",\"/home/sagnikg/react/JazzApp/src/serviceWorker.js\",\"/home/sagnikg/react/JazzApp/src/index.js\"],\"names\":[\"module\",\"exports\",\"__webpack_require__\",\"p\",\"App\",\"Toggle\",\"_React$Component\",\"props\",\"_this\",\"Object\",\"classCallCheck\",\"this\",\"possibleConstructorReturn\",\"getPrototypeOf\",\"call\",\"state\",\"Toglu\",\"handlemarbo\",\"bind\",\"assertThisInitialized\",\"inherits\",\"createClass\",\"key\",\"value\",\"setState\",\"react_default\",\"a\",\"createElement\",\"onClick\",\"React\",\"Component\",\"Boolean\",\"window\",\"location\",\"hostname\",\"match\",\"ReactDOM\",\"render\",\"StrictMode\",\"src_App\",\"document\",\"getElementById\",\"navigator\",\"serviceWorker\",\"ready\",\"then\",\"registration\",\"unregister\",\"catch\",\"error\",\"console\",\"message\"],\"mappings\":\"yIAAAA,EAAAC,QAAiBC,EAAAC,EAAuB,0LC+BzBC,IAAAA,EA3Bf,WAAe,IACPC,EADO,SAAAC,GAEX,SAAAD,EAAYE,GAAM,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAN,IAChBG,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAJ,GAAAS,KAAAH,KAAMJ,KACDQ,MAAQ,CAAGC,OAAQ,GACxBR,EAAKS,YAAcT,EAAKS,YAAYC,KAAjBT,OAAAU,EAAA,EAAAV,CAAAA,OAAAU,EAAA,EAAAV,CAAAD,KAHHA,EAFP,OAAAC,OAAAW,EAAA,EAAAX,CAAAJ,EAAAC,GAAAG,OAAAY,EAAA,EAAAZ,CAAAJ,EAAA,CAAA,CAAAiB,IAAA,cAAAC,MAAA,WASTZ,KAAKa,SAAU,SAAAT,GAAK,MAAK,CACvBC,OAASD,EAAMC,WAVR,CAAAM,IAAA,SAAAC,MAAA,WAeT,OACEE,EAAAC,EAAAC,cAAA,SAAA,CAAQC,QAAWjB,KAAKM,aACrBN,KAAKI,MAAMC,MAAM,KAAK,WAjBlBX,EAAA,CACQwB,EAAAA,EAAMC,WAsB3B,OAAOL,EAAAC,EAAAC,cAACtB,EAAD,OCfW0B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,EAAAA,EAASC,OACPZ,EAAAC,EAAAC,cAACF,EAAAC,EAAMY,WAAP,KACEb,EAAAC,EAAAC,cAACY,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,KAAK,SAAAC,GACJA,EAAaC,eAEdC,MAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME\",\"sourcesContent\":[\"module.exports = __webpack_public_path__ + \\\"static/media/logo.5d5d9eef.svg\\\";\",\"import React from 'react';\\nimport logo from './logo.svg';\\nimport './App.css';\\n\\nfunction App() {\\n  class Toggle extends React.Component {\\n    constructor(props){\\n      super(props);\\n      this.state = {  Toglu : true};\\n      this.handlemarbo = this.handlemarbo.bind(this);\\n    }\\n\\n    handlemarbo(){\\n      this.setState( state => ({\\n        Toglu : !state.Toglu\\n      }))\\n    }\\n\\n    render(){\\n      return (\\n        <button onClick = {this.handlemarbo}>\\n          {this.state.Toglu?'ON':'OFF'}\\n        </button>\\n      );\\n    }\\n  }\\n\\n  return <Toggle />\\n  // setInterval(tick, 1000);\\n}\\n\\nexport default App;\\n\",\"// This optional code is used to register a service worker.\\n// register() is not called by default.\\n\\n// This lets the app load faster on subsequent visits in production, and gives\\n// it offline capabilities. However, it also means that developers (and users)\\n// will only see deployed updates on subsequent visits to a page, after all the\\n// existing tabs open on the page have been closed, since previously cached\\n// resources are updated in the background.\\n\\n// To learn more about the benefits of this model and instructions on how to\\n// opt-in, read https://bit.ly/CRA-PWA\\n\\nconst isLocalhost = Boolean(\\n  window.location.hostname === 'localhost' ||\\n    // [::1] is the IPv6 localhost address.\\n    window.location.hostname === '[::1]' ||\\n    // 127.0.0.0/8 are considered localhost for IPv4.\\n    window.location.hostname.match(\\n      /^127(?:\\\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\\n    )\\n);\\n\\nexport function register(config) {\\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\\n    // The URL constructor is available in all browsers that support SW.\\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\\n    if (publicUrl.origin !== window.location.origin) {\\n      // Our service worker won't work if PUBLIC_URL is on a different origin\\n      // from what our page is served on. This might happen if a CDN is used to\\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\\n      return;\\n    }\\n\\n    window.addEventListener('load', () => {\\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\\n\\n      if (isLocalhost) {\\n        // This is running on localhost. Let's check if a service worker still exists or not.\\n        checkValidServiceWorker(swUrl, config);\\n\\n        // Add some additional logging to localhost, pointing developers to the\\n        // service worker/PWA documentation.\\n        navigator.serviceWorker.ready.then(() => {\\n          console.log(\\n            'This web app is being served cache-first by a service ' +\\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\\n          );\\n        });\\n      } else {\\n        // Is not localhost. Just register service worker\\n        registerValidSW(swUrl, config);\\n      }\\n    });\\n  }\\n}\\n\\nfunction registerValidSW(swUrl, config) {\\n  navigator.serviceWorker\\n    .register(swUrl)\\n    .then(registration => {\\n      registration.onupdatefound = () => {\\n        const installingWorker = registration.installing;\\n        if (installingWorker == null) {\\n          return;\\n        }\\n        installingWorker.onstatechange = () => {\\n          if (installingWorker.state === 'installed') {\\n            if (navigator.serviceWorker.controller) {\\n              // At this point, the updated precached content has been fetched,\\n              // but the previous service worker will still serve the older\\n              // content until all client tabs are closed.\\n              console.log(\\n                'New content is available and will be used when all ' +\\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\\n              );\\n\\n              // Execute callback\\n              if (config && config.onUpdate) {\\n                config.onUpdate(registration);\\n              }\\n            } else {\\n              // At this point, everything has been precached.\\n              // It's the perfect time to display a\\n              // \\\"Content is cached for offline use.\\\" message.\\n              console.log('Content is cached for offline use.');\\n\\n              // Execute callback\\n              if (config && config.onSuccess) {\\n                config.onSuccess(registration);\\n              }\\n            }\\n          }\\n        };\\n      };\\n    })\\n    .catch(error => {\\n      console.error('Error during service worker registration:', error);\\n    });\\n}\\n\\nfunction checkValidServiceWorker(swUrl, config) {\\n  // Check if the service worker can be found. If it can't reload the page.\\n  fetch(swUrl, {\\n    headers: { 'Service-Worker': 'script' },\\n  })\\n    .then(response => {\\n      // Ensure service worker exists, and that we really are getting a JS file.\\n      const contentType = response.headers.get('content-type');\\n      if (\\n        response.status === 404 ||\\n        (contentType != null && contentType.indexOf('javascript') === -1)\\n      ) {\\n        // No service worker found. Probably a different app. Reload the page.\\n        navigator.serviceWorker.ready.then(registration => {\\n          registration.unregister().then(() => {\\n            window.location.reload();\\n          });\\n        });\\n      } else {\\n        // Service worker found. Proceed as normal.\\n        registerValidSW(swUrl, config);\\n      }\\n    })\\n    .catch(() => {\\n      console.log(\\n        'No internet connection found. App is running in offline mode.'\\n      );\\n    });\\n}\\n\\nexport function unregister() {\\n  if ('serviceWorker' in navigator) {\\n    navigator.serviceWorker.ready\\n      .then(registration => {\\n        registration.unregister();\\n      })\\n      .catch(error => {\\n        console.error(error.message);\\n      });\\n  }\\n}\\n\",\"import React from 'react';\\nimport ReactDOM from 'react-dom';\\nimport './index.css';\\nimport App from './App';\\nimport * as serviceWorker from './serviceWorker';\\n\\nReactDOM.render(\\n  <React.StrictMode>\\n    <App />\\n  </React.StrictMode>,\\n  document.getElementById('root')\\n);\\n\\n// If you want your app to work offline and load faster, you can change\\n// unregister() to register() below. Note this comes with some pitfalls.\\n// Learn more about service workers: https://bit.ly/CRA-PWA\\nserviceWorker.unregister();\\n\"]}","code":"(window.webpackJsonp=window.webpackJsonp||[]).push([[0],[,,,,,,,,,function(e,t,n){e.exports=n(17)},,,,,function(e,t,n){},function(e,t,n){e.exports=n.p+\"static/media/logo.5d5d9eef.svg\"},function(e,t,n){},function(e,t,n){\"use strict\";n.r(t);var o=n(0),a=n.n(o),r=n(3),c=n.n(r),i=(n(14),n(4)),l=n(5),u=n(7),s=n(6),d=n(8),h=n(1);n(15),n(16);var m=function(){var e=function(e){function t(e){var n;return Object(i.a)(this,t),(n=Object(u.a)(this,Object(s.a)(t).call(this,e))).state={Toglu:!0},n.handlemarbo=n.handlemarbo.bind(Object(h.a)(Object(h.a)(n))),n}return Object(d.a)(t,e),Object(l.a)(t,[{key:\"handlemarbo\",value:function(){this.setState(function(e){return{Toglu:!e.Toglu}})}},{key:\"render\",value:function(){return a.a.createElement(\"button\",{onClick:this.handlemarbo},this.state.Toglu?\"ON\":\"OFF\")}}]),t}(a.a.Component);return a.a.createElement(e,null)};Boolean(\"localhost\"===window.location.hostname||\"[::1]\"===window.location.hostname||window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/));c.a.render(a.a.createElement(a.a.StrictMode,null,a.a.createElement(m,null)),document.getElementById(\"root\")),\"serviceWorker\"in navigator&&navigator.serviceWorker.ready.then(function(e){e.unregister()}).catch(function(e){console.error(e.message)})}],[[9,1,2]]]);","extractedComments":[]}