{"version":3,"sources":["logo.svg","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","names","name","child","App","React","Component","Field","_React$Component2","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","info","inherits","createClass","key","value","subs","map","namu","react_default","a","createElement","className","halo","concat","toConsumableArray","re","i","length","push","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"yIAAAA,EAAAC,QAAiBC,EAAAC,EAAuB,8KCIpCC,eAAQ,CACV,CAACC,KAAM,YACNC,MAAO,CAAC,QAAQ,aAAa,WAAW,QAAQ,aAAa,WAAW,QAAQ,aAAa,WAAW,QAAQ,aAAa,eAmDjHC,MA7Cf,WAC2BC,IAAMC,UAuC/B,IAxCa,IAYPC,EAZO,SAAAC,GAaX,SAAAD,EAAYE,GAAM,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAN,IAChBG,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAJ,GAAAS,KAAAH,KAAMJ,KACDQ,MAAQ,CACXf,KAAMQ,EAAKD,MAAMS,KAAKhB,KACtBC,MAAOO,EAAKD,MAAMS,KAAKf,OAJTO,EAbP,OAAAC,OAAAQ,EAAA,EAAAR,CAAAJ,EAAAC,GAAAG,OAAAS,EAAA,EAAAT,CAAAJ,EAAA,EAAAc,IAAA,SAAAC,MAAA,WA4BV,IAAIC,EAAOV,KAAKI,MAAMd,MAAMqB,IAAI,SAACC,GAAD,OAAUC,EAAAC,EAAAC,cAAA,MAAIC,UAAU,oBAAoBJ,KACzEK,EAAI,CAAIJ,EAAAC,EAAAC,cAAA,MAAIC,UAAU,cAAchB,KAAKI,MAAMf,MAAWwB,EAAAC,EAAAC,cAAA,YAAtDG,OAAApB,OAAAqB,EAAA,EAAArB,CAA+DY,IACtE,OACEG,EAAAC,EAAAC,cAAA,WACCF,EAAAC,EAAAC,cAAA,OAAKC,UAAU,YACZC,QAjCIvB,EAAA,CAYOF,IAAMC,WA2BtB2B,EAAG,GACCC,EAAE,EAAEA,EAAEjC,EAAMkC,OAAOD,IAC1BD,EAAGG,KAAKV,EAAAC,EAAAC,cAACrB,EAAD,CAAOW,KAAMjB,EAAMiC,MAC5B,OAAOD,GC1CWI,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACPjB,EAAAC,EAAAC,cAACF,EAAAC,EAAMiB,WAAP,KACElB,EAAAC,EAAAC,cAACiB,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,KAAK,SAAAC,GACJA,EAAaC,eAEdC,MAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME","file":"static/js/main.a3c7b3ff.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\n\nvar names = [\n  {name: 'Jashomoti',\n   child: ['Jasho','Jashomonti','Jazzmoti','Jasho','Jashomonti','Jazzmoti','Jasho','Jashomonti','Jazzmoti','Jasho','Jashomonti','Jazzmoti']\n  },\n  // {name: 'Jashomonti',\n  //  child: ['Jashomonty']\n  // }\n]\nfunction App() {\n  class PhiriyeDao extends React.Component{\n    constructor(props){\n      super(props);\n    }\n\n    render()\n    {\n      return (<h1 className=\"nameholder\" id=\"PhiriyeDao\">...</h1>);\n    }\n  }\n\n  class Field extends React.Component{\n    constructor(props){\n      super(props);\n      this.state = {\n        name: this.props.info.name,\n        child: this.props.info.child\n      }\n    }\n    // var halo = [<h1 className=\"nameholder\">{this.state.name}</h1>,<br/>,...subs];\n    // return (\n    //   <div>\n    //    <div className=\"namebloc\">\n    //      {halo}\n    //    </div>\n    //    </div>\n    render(){\n     var subs = this.state.child.map((namu) => <h1 className=\"nameholder child\">{namu}</h1>);\n    var halo = [<h1 className=\"nameholder\">{this.state.name}</h1>,<br/>,...subs];\n     return (\n       <div>\n        <div className=\"namebloc\">\n          {halo}\n        </div>\n        </div>\n      );\n    }\n  }\n  var re=[];\n  for(let i=0;i<names.length;i++)\n   re.push(<Field info={names[i]}/>);\n  return re;\n}\n\nexport default App;\n\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n\n// \"homepage\": \"https://github.com/RollingThunderSagnik/JazzApp#readme\""],"sourceRoot":""}